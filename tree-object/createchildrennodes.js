const mongoose = require('mongoose');
mongoose.Promise = require('bluebird');

// Require Mongoose Model
const EClass = require('../models/eclass.js');

// Connect to Database
mongoose.connect('mongodb://localhost:27017/autoMDM')
  .then(() => console.log('connection succesfully to MongoDB'))
  .catch(err => console.error('Connection Error: ', err));

const db = mongoose.connection;

/*
// Expected format of the node (there are no required fields)
{
  id          : "string" // will be autogenerated if omitted
  text        : "string" // node text
  icon        : "string" // string for custom
  state       : {
    opened    : boolean  // is the node open
    disabled  : boolean  // is the node disabled
    selected  : boolean  // is the node selected
  },
  children    : []  // array of strings or objects
  li_attr     : {}  // attributes for the generated LI node
  a_attr      : {}  // attributes for the generated A node
}

*/
// .sort({ eclassSegment: 1, eclassMainGroup: 1, eclassGroup: 1, eclassCommodityClass: 1 })


const parentNode = '23010100';

// Find children
// const parentNodeSegment = parentNode.slice(0, 2);
// console.log(parentNodeSegment);

// What should be done when clicking the parent node depending on what level it is at.
/*
switch(level) {
  case 1:
    const parentNodeSegment = parentNode.slice(0, 2);
    EClass.find({ eclassSegment: parentNodeSegment, level: 2 }
    break;
  case 2:
    const parentNodeSegment = parentNode.slice(0, 2);
    const parentNodeMainGroup = parentNode.slice(2, 4);
    EClass.find({ eclassSegment: parentNodeSegment, eclassMainGroup: parentNodeMainGroup, level: 3 }
    break;
  case 3:
    const parentNodeSegment = parentNode.slice(0, 2);
    const parentNodeMainGroup = parentNode.slice(2, 4);
    const parentNodeGroup = parentNode.slice(4, 6);
    EClass.find({ eclassSegment: parentNodeSegment, eclassMainGroup: parentNodeMainGroup, eclassGroup: parentNodeGroup, level: 4}
    break;
  case 4:
    // List all part numbers on the right side of the page
    break;
}
*/

db.once('open', () => {
  const getFirstLevel = () => {
    // find level: 2 nodes for the parent node
    // EClass.find({ eclassSegment: parentNode.slice(0, 2), level: 2 }, { _id: 0, eclassSegment: 1, eclassMainGroup: 1, eclassGroup: 1, eclassCommodityClass: 1, preferredName: 1 }, (err, result) => {

    // find level: 3 nodes for the parent node
    // EClass.find({ eclassSegment: parentNode.slice(0, 2), eclassMainGroup: parentNode.slice(2, 4), level: 3 }, { _id: 0, eclassSegment: 1, eclassMainGroup: 1, eclassGroup: 1, eclassCommodityClass: 1, preferredName: 1 }, (err, result) => {
    // find level: 4 nodes for the parent node
    EClass.find({ eclassSegment: parentNode.slice(0, 2), eclassMainGroup: parentNode.slice(2, 4), eclassGroup: parentNode.slice(4, 6), level: 4 }, { _id: 0, eclassSegment: 1, eclassMainGroup: 1, eclassGroup: 1, eclassCommodityClass: 1, preferredName: 1 }, (err, result) => {
      if (err) {
        console.log('Error: ', err);
      } else {
        // console.log(result);
        let jsTreeArrayOfObjects = [];
        for (let i = 0; i < result.length; i++) {
          jsTreeArrayOfObjects.push({
            id: result[i].eclassSegment + result[i].eclassMainGroup + result[i].eclassGroup + result[i].eclassCommodityClass,
            text: result[i].preferredName,
            icon: 'string',
            state: { opened: false, disabled: false, selected: false },
            children: [],
            li_attr: {},
            a_attr: {},
          });
        }
        console.log(JSON.stringify(jsTreeArrayOfObjects, null, 2));
      }
    })
    .then(() => {
      mongoose.disconnect();
      // console.log(JSON.stringify(jsTreeObject));
    })
    .catch((err) => {
      console.log('There was an error when disconnecting: ', err);
    });
  };
  getFirstLevel();
});