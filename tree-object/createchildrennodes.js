const mongoose = require('mongoose');
mongoose.Promise = require('bluebird');

// Require Mongoose Model
const EClass = require('../models/eclass.js');

// Connect to Database
mongoose.connect('mongodb://localhost:27017/autoMDM')
  .then(() => console.log('connection succesfully to MongoDB'))
  .catch(err => console.error('Connection Error: ', err));

const db = mongoose.connection;
db.once('open', () => {
  /*
  // Expected format of the node (there are no required fields)
  {
    id          : "string" // will be autogenerated if omitted
    text        : "string" // node text
    icon        : "string" // string for custom
    state       : {
      opened    : boolean  // is the node open
      disabled  : boolean  // is the node disabled
      selected  : boolean  // is the node selected
    },
    children    : []  // array of strings or objects
    li_attr     : {}  // attributes for the generated LI node
    a_attr      : {}  // attributes for the generated A node
  }
  */
  // 23000000 => level: 1, 23010000 => level: 2, 23010100 => level: 3
  // 23010101 => level: 4 (will not have any children)
  const parentNode = '23010100';
  // Level of parent node...
  const lvl = 3;

  switch (lvl) {
    case 1:
      this.mongoQuery = {
        eclassSegment: parentNode.slice(0, 2),
        level: 2,
      };
      break;
    case 2:
      this.mongoQuery = {
        eclassSegment: parentNode.slice(0, 2),
        eclassMainGroup: parentNode.slice(2, 4),
        level: 3,
      };
      break;
    case 3:
      this.mongoQuery = {
        eclassSegment: parentNode.slice(0, 2),
        eclassMainGroup: parentNode.slice(2, 4),
        eclassGroup: parentNode.slice(4, 6),
        level: 4,
      };
      break;
    case 4:
      // List all part numbers on the right side of the page
      break;
  }
  const getFirstLevel = (mQuery) => {
    EClass.find(mQuery, {
      _id: 0,
      eclassSegment: 1,
      eclassMainGroup: 1,
      eclassGroup: 1,
      eclassCommodityClass: 1,
      preferredName: 1,
    }, (err, result) => {
      if (err) {
        console.log('Error: ', err);
      } else {
        const jsTreeArrayOfObjects = [];
        for (let i = 0; i < result.length; i++) {
          jsTreeArrayOfObjects.push({
            id: result[i].eclassSegment +
                result[i].eclassMainGroup +
                result[i].eclassGroup +
                result[i].eclassCommodityClass,
            text: result[i].preferredName,
            icon: 'string',
            state: {
              opened: false,
              disabled: false,
              selected: false,
            },
            children: [],
            li_attr: {},
            a_attr: {},
          });
        }
        console.log(JSON.stringify(jsTreeArrayOfObjects, null, 2));
      }
    })
      .then(() => {
        mongoose.disconnect();
        // console.log(JSON.stringify(jsTreeObject));
      })
      .catch((err) => {
        console.log('There was an error when disconnecting: ', err);
      });
  };
  getFirstLevel(this.mongoQuery);
});
